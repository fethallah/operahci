//#############################################################################################
//# Acapella Script and procedures Collection: A collection of Acapella based scripts
//# and libraries.
//#
//# Please acknowledge the author(s)/contributor(s) for making use of these scripts and library.
//# Authors:
//#   * Ghislain M.C. Bonamy
//#   * Genomics Institute of the Novartis Research Foundation (GNF), San Diego, CA 92122
//#   * www.gnf.org
//#
//# You can obtain the latest version of this software at: http://code.google.com/p/operahci/
//#
//# This program is free software; you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation; either version 2 of the License, or
//# (at your option) any later version.
//#
//# This program is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with this program; if not, write to the Free Software
//# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//# or go to: http://www.apache.org/licenses/
//#############################################################################################

//*********************************************************************************************
//*
//* This script is used to measure the co-localization between 2 markers. Several
//* co-localizalization models are used.
//*
//*********************************************************************************************


proc getChanInfo(memblock chanInfo out){

	input(name, "Exp1Cam1", "NucChannelName", type="String", description="Channel containing the Nuclear stain. Allowed values: \"Exp1Cam1\",\"Exp1Cam2\",\"Exp1Cam3\",\"Exp1Cam4\",\"Exp2Cam1\",\"Exp2Cam2\",\"Exp2Cam3\",\"Exp2Cam4\".")
	input(desc, "Hoechst", "Nuclear StainDescription", type="String", description="Description of the Nuclear channel (ex. Hoechst, MGD...).")
	input(minIntensity, 150, "Min Nuclear Channel Intensity", type="i",  description="Minimum intensity for the Nuclear channel images to be considered as positive. Allowed range: 0..1000.")
	push(chanPurpose,"nucDetection")	
	push(chanNames,name)
	push(chanDesc,desc)
	push(chanMin,minIntensity)
	push(chanCutOff,0)
	push(chanThreshold,0)

	input(Name, "Exp1Cam1", "CytoplasmicChannelName", type="String", description="Channel containing the fluorescence from theCytoplasmic stain. Can be same as Nuclear channel. Allowed values: \"Exp1Cam1\",\"Exp1Cam2\",\"Exp1Cam3\",\"Exp1Cam4\",\"Exp2Cam1\",\"Exp2Cam2\",\"Exp2Cam3\",\"Exp2Cam4\",\"NA\".")
	input(desc, "MGD", "Cytoplasmic StainDescription", type="String", description="Description of the Cytoplasmic stain.")
	if(desc!="NA" && Name!="NA")
		input(minIntensity, 150, "Min Cytoplasmic Channel Intensity", type="d",  description="Minimum intensity for the Cytoplasmic channel images to be considered as positive. Allowed range: 1..1000, step 0.1.")
		push(chanPurpose,"cytoDetection")
		push(chanNames,Name)
		push(chanDesc,desc)	
		push(chanMin,minIntensity)
		push(chanCutOff,0)
		push(chanThreshold,0)
	end()

	input(Name, "Exp1Cam2", "Marker1ChannelName", type="String", description="Channel containing the fluorescence from the first marker. Allowed values: \"Exp1Cam1\",\"Exp1Cam2\",\"Exp1Cam3\",\"Exp1Cam4\",\"Exp2Cam1\",\"Exp2Cam2\",\"Exp2Cam3\",\"Exp2Cam4\",.")
	input(desc, "GFP", "Marker1Description", type="String", description="Description of the first marker (ex. GFP).")
	input(cutOff, 150, "Marker1 Positive CuttOff", type="d",  description="Cutt-off value to use to define Cells that are Positive for marker2. Only Cells positive for marker1 and marker2 are returned. Allowed range: 1..1000, step 0.1.")
	input(threshold, 150, "Marker1 Positive Object Threshold", type="d",  description="Cutt-off value to use to define Cells that are Positive for marker2. Only Cells positive for marker1 and marker2 are returned. Allowed range: 1..10000, step 1.")

	if(cutOff<1 || threshold<1)
		Error("The cutt-off and threshold must be >= to 1")
	end()	
	if(cutOff<1)
		Error("The cutt-off must be >= to 1")
	end()	
	push(chanPurpose,"marker")
	push(chanNames,Name)
	push(chanDesc,desc)	
	push(chanMin,0)
	push(chanCutOff,cutOff)
	push(chanThreshold,threshold)

	input(Name, "Exp1Cam3", "Marker2ChannelName", type="String", description="Channel containing the fluorescence from the second marker.Allowed values: \"Exp1Cam1\",\"Exp1Cam2\",\"Exp1Cam3\",\"Exp1Cam4\",\"Exp2Cam1\",\"Exp2Cam2\",\"Exp2Cam3\",\"Exp2Cam4\".")
	input(desc, "RFP", "Marker2Description", type="String", description="Description of the second marker (ex. RFP).")
	input(cutOff, 150, "Marker2 Positive CuttOff", type="d",  description="Cutt-off value to use to define Cells that are Positive for marker2. Only Cells positive for marker1 and marker2 are returned. Allowed range: 1..1000, step 0.1.")
	input(threshold, 150, "Marker2 Positive Object Threshold", type="d",  description="Cutt-off value to use to define Cells that are Positive for marker2. Only Cells positive for marker1 and marker2 are returned. Allowed range: 1..10000, step 1.")

	if(cutOff<1||threshold<1)
		Error("The cutt-off and threshold must be >= to 1")
	end()	
	push(chanPurpose,"marker")
	push(chanNames,Name)
	push(chanDesc,desc)	
	push(chanMin,0)
	push(chanCutOff,cutOff)
	push(chanThreshold,threshold)

	set(table=tbl(name=chanNames, desc=chanDesc,min=chanMin,purpose=chanPurpose, cutOff=chanCutOff,threshold=chanThreshold))
	rename(chanInfo=table)
}


proc paramInit(memblock param out){

	input(showIllustrations, false, "showIllustrations", type="b", description="Indicate whether or not you want to see the illustrations for the objects detected. Used in combination with fieldToAnalyze. This option is deactivated on the RMCA.")  
	EnvInfo()
	Set(showIllustrations=showIllustrations && env_interactive && env_supports_graphview && env_supports_htmlview && env_supports_imageview && env_supports_tableview)
	input(fieldSelected, 1, "fieldToAnalyze", type="i", description="If show illustration is selected, only analyze the selected field. use \"0\" to analyze every fields.")

	input(getSingleCellFeatures, false, "Save Single-Cell Features", type="b", description="Indicate whether or not you want to save the single cell features to a file.")  
	input(getROI, false, "Save ROI", type="b", description="Indicate whether or not you want to save the Nuclear and cellular outlines to a file.") 	
	input(OutputStatType, "Median", "Well Aggregation", type="String", description="Select how the multiple fields should be agregated accross Channles. Allowed values: \"Mean\", \"Median\",\"Min\",\"Max\",\"Sum\".")

	input(cutOffType, "threshold", "Cut-Off type", type="string", description="Enter the type of cutt-off you wish to use. Each of these methods corresponds to: \"threshold: intensity of the signal considered as positive;\" \"folds: number of fold above the background for the signal to be considered as positive;\", \" stddev: number of bckground standard deviation above the background for the signal to be considered as positive.\". Allowed values: \"threshold\", \"folds\", \"stddev\".")
	if(cutOffType!="threshold"&&cutOffType!="folds"&&cutOffType!="stddev")
		error("The Cut-Off type must be either  \"threshold\", \"folds\" or \"stddev\"")
	end()

	input(Compartment,"Nuclei","Compartment:Co-Localization","s","Where do you wish to study colocalization. Allowed values: \"Nuclei\",\"WholeCells\",\"Cytoplasm\",\"Nuclei-Cytoplasm\".")
	input(Normalization,2.5,"Normalization:Co-Localization","d","Remove nuclei and/or cells with a roundness or area which is x standard deviation above or bellow the mean value for various features such as area, roundness, etc. With lower values fewer objects are kept. Allowed range: 0..20, step 0.1")
	input(Method,"PearsonsCoefficient","Method:Co-Localization","s","Method to use for the co-localization analysis. Allowed values: \"PearsonsCoefficient\", \"ICQ\",\"MandersCoefficient\",\"%Overlap\",\"All Methods\".")
	Pack(param,*)
	keep(param)
}

proc imageAnalysis(memblock images in, memblock param in, container imageData out){


	Unpack(param)
	set(cytoChanNum=-1,cytoChanMin=0)
	if(findElem("cytoDetection",chanInfo.purpose).pos>=0)
		set(cytoChanNum=chanInfo.number[findElem("cytoDetection",chanInfo.purpose).pos])
		set(cytoChanMin=chanInfo.min[findElem("cytoDetection",chanInfo.purpose).pos])
	end()
	set(nucChanNum=chanInfo.number[findElem("nucDetection",chanInfo.purpose).pos])
	set(nucChanMin=chanInfo.min[findElem("nucDetection",chanInfo.purpose).pos])
	set(marker1ChanNum=chanInfo.number[SearchElem("marker",chanInfo.purpose,occurence=1).pos])
	set(marker2ChanNum=chanInfo.number[SearchElem("marker",chanInfo.purpose,occurence=2).pos])

	set(imageData=cnt())
	if(images[nucChanNum].image.max>nucChanMin)
		bckGndSubstraction(-1,images=images)
		Foreach(0..images.length-1)
			if(cutOffType=="folds")
				push(cutOff,(images[i].cutoff-1)*bckGndObjects["Body_"&images[i].desc&"_MeanIntensity"].mean)
				push(thresholds,(images[i].threshold-1)*bckGndObjects["Body_"&images[i].desc&"_MeanIntensity"].mean)
			else()if(cutOffType=="stddev")
				push(cutOff,images[i].cutoff*bckGndObjects["Body_"&images[i].desc&"_StdDevIntensity"].mean)
				push(thresholds,images[i].threshold*bckGndObjects["Body_"&images[i].desc&"_StdDevIntensity"].mean)
			else()
				push(cutOff,images[i].cutoff-images[i].bckGndSubstracted)
				push(thresholds,images[i].threshold-images[i].bckGndSubstracted)
			end()end()
		end()
		
		set(minNucIntensity=stdDevToSubstract*bckGndObjects["Body_"&images[i].desc&"_StdDevIntensity"].mean+1)
		
		set(nucImage=images[nucChanNum].image)
		Nuclei_Detection(nucImage)
		
		if(cytoChanNum>=0 && Compartment !="Nuclei")
			//set(minCytoIntensity=stdDevToSubstract*bckGndObjects["Body_"&images[i].desc&"_StdDevIntensity"].mean)
			convert(bpp=1,image=images[cytoChanNum].image)
			Cytoplasm_Detection_Select(reference=image)
			//CalcIntensity(image=images[cytoChanNum].image,objects=WholeCells)
			//ObjectFilter(intensity>minCytoIntensity)
			//DeleteAttr(Intensity)
			//Rename(WholeCells=objects)
		end()
		
		//Filtering/Normalizing of nuclei. Then select corresponding cells
		ObjectFilter(intensity>minNucIntensity,objects=nuclei)
		if(showIllustrations)
			ImageView(objects.border.mask,label="Nuclei", title="Nuclei Detected",image=nucImage,  gamma=2)
		end()
		DeleteAttr(intensity)
		normalizeObjects(Normalization)
		rename(nuclei=objects)
		
		//Filter/Normalize Cytoplasms
		if(cytoChanNum>=0 && Compartment !="Nuclei")
			Rename(objects=WholeCells)
			CalcIntensity(image=Nuclei.body.mask.image)
			ObjectFilter(intensity>0)
			DeleteAttr(intensity)
			normalizeObjects(Normalization)
			Rename(WholeCells=Objects)
		end()	
		
		Set(data=cnt())
		if(at("Nuclei",compartment,1)>0)
			Stencil2Objects(Nuclei.body,Neighbourhood=8,CalcArea=false)
			set(data.Nuclei=objects)
		end()
		if(compartment=="WholeCells")
			Stencil2Objects(WholeCells.body,Neighbourhood=8,CalcArea=false)
			set(data.WholeCells=objects)
		end()
		if(at("Cytoplasm",compartment,1)>0)
			Stencil2Objects(WholeCells.cytoplasm,Neighbourhood=8,CalcArea=false)
			set(data.Cytoplasm=objects)
		end()
		
		foreach(data.keys)
			set(objects=data[i])
			if(method=="%Overlap"||method=="All Methods")
				CalcPercentOverlap(images[marker1ChanNum].image,images[marker2ChanNum].image,thresholds[marker2ChanNum],thresholds[marker2ChanNum])
			
			end()
			if(method=="PearsonsCoefficient"||method=="All Methods")
				MBF_PearsonsCoefficient(images[marker1ChanNum].image,images[marker2ChanNum].image)
			end()
			if(method=="ICQ"||method=="All Methods")			
				MBF_ICQ(images[marker1ChanNum].image,images[marker2ChanNum].image)
			end()
			if(method=="MandersCoefficient"||method=="All Methods")		
				MBF_MandersCoefficients(images[marker1ChanNum].image,images[marker2ChanNum].image)
			end()
			set(data[i]=objects)
		end()
		
		Foreach(0..images.length-1)
			CalcIntensity(image=images[i].image)
			Set(objects[images[i].desc&"_Intensity"]=objects.Intensity)
			DeleteAttr(intensity)
		end()		
		
		set(data.bckGndObjects=bckGndObjects)
		rename(imageData=data)
		keep(imageData)
	end()
}

proc Analysis(memblock images in,memblock param in, memblock sourceDataProp inout, container data out){

	set(wholeWellData=cnt())
	set(numFieldsInFocus=0)
	Set(FeaturesTable=Tbl(),ROITable=Tbl())
	if(images.length>0)
	foreach(0..images.length-1, "field")
	foreach(0..images[field].length-1, "stack")
		imageAnalysis(images[field][stack],param)
		if(imageData.length>0)
			set(numFieldsInFocus=numFieldsInFocus+1)
			if(param.getROI)
				if(defined("imageData.Nuclei"))
					getROITable(imageData.Nuclei,ObjectType="Nuclei")
				end()
				if(defined("imageData.WholeCells"))
					getROITable(imageData.WholeCells,ObjectType="WholeCells")
				end()
			end()
			if(param.getSingleCellFeatures)
				Foreach(imageData.keys,"keyName")
					Set(objects=ImageData[keyName])
						if(objects.class=="objectlist"||objects.class=="compositObjectlist")
							try() //Skip objects that do not have a real setncil stencil and for which a center of mass can be determined.
								getFeaturesTable(objects,ObjectType=keyname)
							Catch_Error()
							end()
						end()
				end()
			end()
			
			combineMemBlocks(wholeWellData, imageData,DeleteGeometry=true,KeepAutoRecalc=false)
			rename(wholeWellData=newData)
		end()
		delete(imageData)
	end()
	end()
	end()

	Set(singleCellData=Cnt())
	if(param.getSingleCellFeatures)
		Set(singleCellData.Features=FeaturesTable)
	end()
	if(param.getROI)
		Set(singleCellData.ROI=ROITable)
	end()
	set(wholeWellData.numFieldsInFocus=numFieldsInFocus)
	pack(data,wholeWellData,singleCellData)
}
proc dataOutput(container data in, Container sourcedataprop in, String statValue="median" in){
	unpack(data)
	delete(data)
	if(Defined("singleCellData.Features"))
		GZipData(singleCellData.Features,path=sourcedataprop.fileDir,name=sourcedataprop.WellID,extension="feat",label="")
	end()
	if(Defined("singleCellData.ROI"))
		GZipData(singleCellData.ROI,path=sourcedataprop.fileDir,name=sourcedataprop.WellID,extension="roi",label="")
	end()
	outputMemblockData( wholeWellData)
}


//#######################
// Program Start
//#######################
getChanInfo()
ParamInit()
imagesInitV2()
chanAttrib()
set(param.chanInfo=chanInfo)
if(param.showIllustrations&&param.fieldSelected!=0)
	set(param.fieldSelected=iif(param.fieldSelected<1,1,param.fieldSelected))
	set(param.fieldSelected=iif(param.fieldSelected>images.length,images.length,param.fieldSelected))
	set(Images=vec(images[param.fieldSelected-1]))
end()

Analysis()
writeChannelMapping(images, sourcedataprop.fileDir,sourcedataprop.WellID)
dataOutput()