Package(Texture)

proc ComputeHaralick(
//	1
	memblock(stencil:vector) stencil explicit in "Areas to calculate the texture parameters for.",
//	2
	integer CalcEntropy=1 explicit in "Flag.",
//	nonpositional
	memblock(image) image nonpositional in "Input data vector.",
//	out
	memblock Table out "Texture attributes"
)
	[experimental]
	Data processing
	"Calculates Haralick texture parameters for stencil-limited areas of an image; still experimental."
{
	Texture_ComputeHaralick(stencil,CalcEntropy,image=image)
}


proc DerivativePass(
//	1
	integer Degree explicit in "Degree of derivative. Allowed values: 1, 2.",
//	nonpositional
	memblock(image:float,double,) Image nonpositional in "The input image.",
//	out
	memblock Image out "The filtered image."
)
	Image filters
	"Replaces each image row with the first or second derivative in the y direction.",
{
	Texture_DerivativePass(degree,image=image)
}

proc GaborFilter(
//	nonpositonal
	memblock(image:float,) Image nonpositional in "The input image",
	memblock(vector:double,) Orientations explicit nonpositional in "A vector containing the orientations in the gabor filter bank, in radians.",
	memblock(vector:double,)  Scales explicit nonpositional in "A vector containing scales in the Gabor filter bank.",
	memblock(image:byte,) Sw_table explicit nonpositional in "A boolean matrix indicating which combinations scale/wavelength are to process. Each matrix line corresponds to a scale in the Scales vector. Each matrix column corresponds to a wavelength in the Wavelengths vector. The number of non-zero elements in the matrix gives the number of Gabor kernels to use.",
	memblock(vector:double,) wavelengths explicit nonpositional in "A vector of wavelengths.",
//	out
	memblock(table) GaborResults out "A table containing computed real, imaginary and energy levels.",
	memblock(vector) GaussianResults out "A vector containing computed Gaussian levels. The elements correspond to different scales in the Scales parameter.",
	memblock(vector) LaplacianResults out "A vector containing computed Laplacian levels. The elements correspond to different scales in the Scales parameter."
)
	Image filters
	"Applies Gabor filter to an image."
{
	Texture_GaborFilter(Image=image,Orientations=orientations,Scales=scales,Sw_table=sw_table,Wavelengths=wavelengths)
}

proc LinearPass(
//	1
	memblock(vector:double,) Coefs explicit in "A vector of coefficients for the linear combination of rows. Coefs[0] is used for weighing the current row, Coefs[1] for the previous row (as determined by the pass direction), etc.",
//	nonpositonal
	memblock(image:float,double,) Image nonpositional in "The input image.",
//	out
	memblock Image out "The filtered image."
)
	Image filters
	"Makes a forward and backward pass over image rows, replacing a row on each step with a linear combination of this and previous rows, according to the coefficients vector."
{
	Texture_LinearPass(Coefs,image=image)
}
