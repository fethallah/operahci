//#############################################################################################
//# Acapella Script and procedures Collection: A collection of Acapella based scripts
//# and libraries.
//#
//# Please acknowledge the author(s)/contributor(s) for making use of these scripts and library.
//# Authors:
//#   * Ghislain M.C. Bonamy
//#   * Genomics Institute of the Novartis Research Foundation (GNF), San Diego, CA 92122
//#   * www.gnf.org
//#
//# You can obtain the latest version of this software at: http://code.google.com/p/operahci/
//#
//# This program is free software; you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation; either version 2 of the License, or
//# (at your option) any later version.
//#
//# This program is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with this program; if not, write to the Free Software
//# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//# or go to: http://www.apache.org/licenses/
//#############################################################################################

package(Readers)

//*********************************************************************************************
//*
//* This procedure file contains general methods used to extract info from images
//*
//*********************************************************************************************

proc row2num(
	string row in "Row string to convert to numeric value",
	int row_n out "Numeric row value"
) ImageReader "Converts row string to row number (starting at 1)"
{
	set(row_n=0)
	if(row.length>2)
		Error("The row: '"&row&"' is not valid.It be more than a 2 chararacter string.")
	end()
	if(row.length>1)
		set(row=substr(row,2,1))
		set(row_n=26)
	end()
	sprintf(row,"%a",row)
	set(row_n=row_n+row-64)
}

proc row2str(
	int row_n in "Numeric row value to convert",
	String firstDoubleLetter="A" in "Indicate what first letter should be used for rows >26. Choose between 'A' or 'Z'",
	int row out "Corresponding row string"
) ImageReader "Converts row number to row letters."
{
	if(firstDoubleLetter!="A" && firstDoubleLetter!="Z")
		error("The first letter of a row that has an index >26, should be 'A' or 'Z'.")
	end()
	Push(LETTERS,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
	set(row="")
	if(row_n>26)
		set(row_n=row_n-26)
		set(row=firstDoubleLetter)
	end()
	set(row=row&LETTERS[row_n-1])
}

proc getWellName(
	int wellIndex in "WellIndex to convert into a well name",
	int wellName out "Numeric col value"
) ImageReader "Returns the well name from a well Index"
{
	// wellindex needs to have 9 digits
	sprintf(wellindex,"%09s",wellindex)
	Regex(wellIndex,"(\\d{3})(\\d{3})\d{3}")
	if(matches.length!=2 || wellindex.length>9)
		error("The WellIndex you provided is not valid")
	end()
	Set(row=matches[0])
	Set(col=matches[1])
	sprintf(wellName,"%03s%03s",row2str(row),col)
}

proc getWellIndex(
	string wellName in "WellIndex to convert into a well name",
	boolean suffix=true in "Adds '000' sufix to the WellIndex",
	string wellIndex out "WellIndex provided as a ColRow000 value"
) ImageReader "Returns the well name from a well Index"
{
	// wellindex needs to be of type A1
	regex(wellName,"([:alpha:])(\d{1,2})")
	if(matches.length!=2)
		error(sprintf(error,"'%s' is not a valid wellName", wellName).error)
	end()

	set(row_n=row2num(matches[0]).row_n)
	set(col=matches[1])
	sprintf(wellindex,"%03d%03d%s",row_n,col,iif(suffix,"000",""))
}